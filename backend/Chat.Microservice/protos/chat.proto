syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "ChatService";

package chat;


message FromClientMessage {
  string topicName = 1;
  string text = 2;
}

message MessageAuthor {

  string id = 1;
  string name = 2;
  bool isManager = 3;
}

message Message {
  string id = 1;
  MessageAuthor author = 2;
  string text = 3;
  google.protobuf.Timestamp time = 4;
}

message TopicInfoMessage {
  string topicName = 1;
}

message FromServerMessage {
  oneof event {
    TopicInfoMessage topicInfo = 1;
    Message message = 2;
  }
}

message ChatSelectorMessage {
  string topic = 1;
}

message ChatHistorySelectorMessage {
  string topic = 1;
  google.protobuf.Int32Value offset = 2;
  google.protobuf.Int32Value limit = 3;
}

message MyChatHistorySelectorMessage {
  google.protobuf.Int32Value offset = 2;
  google.protobuf.Int32Value limit = 3;
}

message ChatHistoryMessage {
  repeated Message history = 1;
}

message ActiveTopicsMessage {
  repeated string topic = 1;
}

message SendMessageResultMessage  {
  bool accepted = 1;
}

service MessagingService {

  rpc SendMessage(FromClientMessage) returns (SendMessageResultMessage);

  rpc GetChatStream(google.protobuf.Empty) returns (stream FromServerMessage);

  rpc GetChatStreamByTopic(ChatSelectorMessage) returns (stream FromServerMessage);
}

service ManagementService {

  rpc GetChatHistory(ChatHistorySelectorMessage) returns (ChatHistoryMessage);

  rpc GetMyChatHistory(MyChatHistorySelectorMessage) returns (ChatHistoryMessage);

  rpc GetActiveTopics(google.protobuf.Empty) returns (ActiveTopicsMessage);
}