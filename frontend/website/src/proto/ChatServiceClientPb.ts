/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.3
// source: chat.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as chat_pb from './chat_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class MessagingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/chat.MessagingService/SendMessage',
    grpcWeb.MethodType.UNARY,
    chat_pb.FromClientMessage,
    chat_pb.SendMessageResultMessage,
    (request: chat_pb.FromClientMessage) => {
      return request.serializeBinary();
    },
    chat_pb.SendMessageResultMessage.deserializeBinary
  );

  sendMessage(
    request: chat_pb.FromClientMessage,
    metadata: grpcWeb.Metadata | null): Promise<chat_pb.SendMessageResultMessage>;

  sendMessage(
    request: chat_pb.FromClientMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_pb.SendMessageResultMessage) => void): grpcWeb.ClientReadableStream<chat_pb.SendMessageResultMessage>;

  sendMessage(
    request: chat_pb.FromClientMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_pb.SendMessageResultMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.MessagingService/SendMessage',
        request,
        metadata || {},
        this.methodDescriptorSendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.MessagingService/SendMessage',
    request,
    metadata || {},
    this.methodDescriptorSendMessage);
  }

  methodDescriptorGetChatStream = new grpcWeb.MethodDescriptor(
    '/chat.MessagingService/GetChatStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_empty_pb.Empty,
    chat_pb.FromServerMessage,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    chat_pb.FromServerMessage.deserializeBinary
  );

  getChatStream(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<chat_pb.FromServerMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chat.MessagingService/GetChatStream',
      request,
      metadata || {},
      this.methodDescriptorGetChatStream);
  }

  methodDescriptorGetChatStreamByTopic = new grpcWeb.MethodDescriptor(
    '/chat.MessagingService/GetChatStreamByTopic',
    grpcWeb.MethodType.SERVER_STREAMING,
    chat_pb.ChatSelectorMessage,
    chat_pb.FromServerMessage,
    (request: chat_pb.ChatSelectorMessage) => {
      return request.serializeBinary();
    },
    chat_pb.FromServerMessage.deserializeBinary
  );

  getChatStreamByTopic(
    request: chat_pb.ChatSelectorMessage,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<chat_pb.FromServerMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chat.MessagingService/GetChatStreamByTopic',
      request,
      metadata || {},
      this.methodDescriptorGetChatStreamByTopic);
  }

}

export class ManagementServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetChatHistory = new grpcWeb.MethodDescriptor(
    '/chat.ManagementService/GetChatHistory',
    grpcWeb.MethodType.UNARY,
    chat_pb.ChatHistorySelectorMessage,
    chat_pb.ChatHistoryMessage,
    (request: chat_pb.ChatHistorySelectorMessage) => {
      return request.serializeBinary();
    },
    chat_pb.ChatHistoryMessage.deserializeBinary
  );

  getChatHistory(
    request: chat_pb.ChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null): Promise<chat_pb.ChatHistoryMessage>;

  getChatHistory(
    request: chat_pb.ChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_pb.ChatHistoryMessage) => void): grpcWeb.ClientReadableStream<chat_pb.ChatHistoryMessage>;

  getChatHistory(
    request: chat_pb.ChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_pb.ChatHistoryMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ManagementService/GetChatHistory',
        request,
        metadata || {},
        this.methodDescriptorGetChatHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ManagementService/GetChatHistory',
    request,
    metadata || {},
    this.methodDescriptorGetChatHistory);
  }

  methodDescriptorGetMyChatHistory = new grpcWeb.MethodDescriptor(
    '/chat.ManagementService/GetMyChatHistory',
    grpcWeb.MethodType.UNARY,
    chat_pb.MyChatHistorySelectorMessage,
    chat_pb.ChatHistoryMessage,
    (request: chat_pb.MyChatHistorySelectorMessage) => {
      return request.serializeBinary();
    },
    chat_pb.ChatHistoryMessage.deserializeBinary
  );

  getMyChatHistory(
    request: chat_pb.MyChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null): Promise<chat_pb.ChatHistoryMessage>;

  getMyChatHistory(
    request: chat_pb.MyChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_pb.ChatHistoryMessage) => void): grpcWeb.ClientReadableStream<chat_pb.ChatHistoryMessage>;

  getMyChatHistory(
    request: chat_pb.MyChatHistorySelectorMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_pb.ChatHistoryMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ManagementService/GetMyChatHistory',
        request,
        metadata || {},
        this.methodDescriptorGetMyChatHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ManagementService/GetMyChatHistory',
    request,
    metadata || {},
    this.methodDescriptorGetMyChatHistory);
  }

  methodDescriptorGetActiveTopics = new grpcWeb.MethodDescriptor(
    '/chat.ManagementService/GetActiveTopics',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    chat_pb.ActiveTopicsMessage,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    chat_pb.ActiveTopicsMessage.deserializeBinary
  );

  getActiveTopics(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<chat_pb.ActiveTopicsMessage>;

  getActiveTopics(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_pb.ActiveTopicsMessage) => void): grpcWeb.ClientReadableStream<chat_pb.ActiveTopicsMessage>;

  getActiveTopics(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_pb.ActiveTopicsMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chat.ManagementService/GetActiveTopics',
        request,
        metadata || {},
        this.methodDescriptorGetActiveTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chat.ManagementService/GetActiveTopics',
    request,
    metadata || {},
    this.methodDescriptorGetActiveTopics);
  }

}

